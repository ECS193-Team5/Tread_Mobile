a93bdc9fab488bb375e0ea0026ac0fff
"use strict";

_getJestObj().mock('@react-native-google-signin/google-signin', function () {
  return {
    statusCodes: mockStatusCodes,
    GoogleSignin: mockGoogleSignin,
    GoogleSigninButton: MockGoogleSigninButtonTyped
  };
});
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mockUserInfo = void 0;
var react_1 = __importDefault(require("react"));
var react_native_1 = require("react-native");
exports.mockUserInfo = {
  idToken: 'mockIdToken',
  serverAuthCode: 'mockServerAuthCode',
  scopes: [],
  user: {
    email: 'mockEmail',
    id: 'mockId',
    givenName: 'mockGivenName',
    familyName: 'mockFamilyName',
    photo: null,
    name: 'mockFullName'
  }
};
var MockGoogleSigninButton = function MockGoogleSigninButton(props) {
  return react_1.default.createElement(react_native_1.Pressable, Object.assign({}, props), react_1.default.createElement(react_native_1.Text, null, "Mock Sign in with Google"));
};
MockGoogleSigninButton.Size = {
  Standard: 0,
  Wide: 1,
  Icon: 2
};
MockGoogleSigninButton.Color = {
  Dark: 0,
  Light: 1
};
var MockGoogleSigninButtonTyped = MockGoogleSigninButton;
var mockStatusCodes = {
  SIGN_IN_CANCELLED: 'mock_SIGN_IN_CANCELLED',
  IN_PROGRESS: 'mock_IN_PROGRESS',
  PLAY_SERVICES_NOT_AVAILABLE: 'mock_PLAY_SERVICES_NOT_AVAILABLE',
  SIGN_IN_REQUIRED: 'mock_SIGN_IN_REQUIRED'
};
var mockGoogleSignin = {
  configure: jest.fn(),
  hasPlayServices: jest.fn().mockResolvedValue(true),
  getTokens: jest.fn().mockResolvedValue({
    accessToken: 'mockAccessToken',
    idToken: 'mockIdToken'
  }),
  signIn: jest.fn().mockResolvedValue(exports.mockUserInfo),
  signInSilently: jest.fn().mockResolvedValue(exports.mockUserInfo),
  revokeAccess: jest.fn().mockResolvedValue(null),
  signOut: jest.fn().mockResolvedValue(null),
  isSignedIn: jest.fn().mockResolvedValue(true),
  addScopes: jest.fn().mockResolvedValue(exports.mockUserInfo),
  getCurrentUser: jest.fn().mockResolvedValue(exports.mockUserInfo),
  clearCachedAccessToken: jest.fn().mockResolvedValue(null)
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJzdGF0dXNDb2RlcyIsIm1vY2tTdGF0dXNDb2RlcyIsIkdvb2dsZVNpZ25pbiIsIm1vY2tHb29nbGVTaWduaW4iLCJHb29nbGVTaWduaW5CdXR0b24iLCJNb2NrR29vZ2xlU2lnbmluQnV0dG9uVHlwZWQiLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJqZXN0IiwiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9ja1VzZXJJbmZvIiwicmVhY3RfMSIsInJlYWN0X25hdGl2ZV8xIiwiaWRUb2tlbiIsInNlcnZlckF1dGhDb2RlIiwic2NvcGVzIiwidXNlciIsImVtYWlsIiwiaWQiLCJnaXZlbk5hbWUiLCJmYW1pbHlOYW1lIiwicGhvdG8iLCJuYW1lIiwiTW9ja0dvb2dsZVNpZ25pbkJ1dHRvbiIsInByb3BzIiwiZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJQcmVzc2FibGUiLCJhc3NpZ24iLCJUZXh0IiwiU2l6ZSIsIlN0YW5kYXJkIiwiV2lkZSIsIkljb24iLCJDb2xvciIsIkRhcmsiLCJMaWdodCIsIlNJR05fSU5fQ0FOQ0VMTEVEIiwiSU5fUFJPR1JFU1MiLCJQTEFZX1NFUlZJQ0VTX05PVF9BVkFJTEFCTEUiLCJTSUdOX0lOX1JFUVVJUkVEIiwiY29uZmlndXJlIiwiZm4iLCJoYXNQbGF5U2VydmljZXMiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImdldFRva2VucyIsImFjY2Vzc1Rva2VuIiwic2lnbkluIiwic2lnbkluU2lsZW50bHkiLCJyZXZva2VBY2Nlc3MiLCJzaWduT3V0IiwiaXNTaWduZWRJbiIsImFkZFNjb3BlcyIsImdldEN1cnJlbnRVc2VyIiwiY2xlYXJDYWNoZWRBY2Nlc3NUb2tlbiJdLCJzb3VyY2VzIjpbInNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tb2NrVXNlckluZm8gPSB2b2lkIDA7XG5jb25zdCByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5jb25zdCByZWFjdF9uYXRpdmVfMSA9IHJlcXVpcmUoXCJyZWFjdC1uYXRpdmVcIik7XG5leHBvcnRzLm1vY2tVc2VySW5mbyA9IHtcbiAgICBpZFRva2VuOiAnbW9ja0lkVG9rZW4nLFxuICAgIHNlcnZlckF1dGhDb2RlOiAnbW9ja1NlcnZlckF1dGhDb2RlJyxcbiAgICBzY29wZXM6IFtdLFxuICAgIHVzZXI6IHtcbiAgICAgICAgZW1haWw6ICdtb2NrRW1haWwnLFxuICAgICAgICBpZDogJ21vY2tJZCcsXG4gICAgICAgIGdpdmVuTmFtZTogJ21vY2tHaXZlbk5hbWUnLFxuICAgICAgICBmYW1pbHlOYW1lOiAnbW9ja0ZhbWlseU5hbWUnLFxuICAgICAgICBwaG90bzogbnVsbCxcbiAgICAgICAgbmFtZTogJ21vY2tGdWxsTmFtZScsXG4gICAgfSxcbn07XG5jb25zdCBNb2NrR29vZ2xlU2lnbmluQnV0dG9uID0gKHByb3BzKSA9PiB7XG4gICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChyZWFjdF9uYXRpdmVfMS5QcmVzc2FibGUsIHsgLi4ucHJvcHMgfSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQocmVhY3RfbmF0aXZlXzEuVGV4dCwgbnVsbCwgXCJNb2NrIFNpZ24gaW4gd2l0aCBHb29nbGVcIikpKTtcbn07XG5Nb2NrR29vZ2xlU2lnbmluQnV0dG9uLlNpemUgPSB7IFN0YW5kYXJkOiAwLCBXaWRlOiAxLCBJY29uOiAyIH07XG5Nb2NrR29vZ2xlU2lnbmluQnV0dG9uLkNvbG9yID0geyBEYXJrOiAwLCBMaWdodDogMSB9O1xuY29uc3QgTW9ja0dvb2dsZVNpZ25pbkJ1dHRvblR5cGVkID0gTW9ja0dvb2dsZVNpZ25pbkJ1dHRvbjtcbmNvbnN0IG1vY2tTdGF0dXNDb2RlcyA9IHtcbiAgICBTSUdOX0lOX0NBTkNFTExFRDogJ21vY2tfU0lHTl9JTl9DQU5DRUxMRUQnLFxuICAgIElOX1BST0dSRVNTOiAnbW9ja19JTl9QUk9HUkVTUycsXG4gICAgUExBWV9TRVJWSUNFU19OT1RfQVZBSUxBQkxFOiAnbW9ja19QTEFZX1NFUlZJQ0VTX05PVF9BVkFJTEFCTEUnLFxuICAgIFNJR05fSU5fUkVRVUlSRUQ6ICdtb2NrX1NJR05fSU5fUkVRVUlSRUQnLFxufTtcbmNvbnN0IG1vY2tHb29nbGVTaWduaW4gPSB7XG4gICAgY29uZmlndXJlOiBqZXN0LmZuKCksXG4gICAgaGFzUGxheVNlcnZpY2VzOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXG4gICAgZ2V0VG9rZW5zOiBqZXN0XG4gICAgICAgIC5mbigpXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGFjY2Vzc1Rva2VuOiAnbW9ja0FjY2Vzc1Rva2VuJywgaWRUb2tlbjogJ21vY2tJZFRva2VuJyB9KSxcbiAgICBzaWduSW46IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShleHBvcnRzLm1vY2tVc2VySW5mbyksXG4gICAgc2lnbkluU2lsZW50bHk6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShleHBvcnRzLm1vY2tVc2VySW5mbyksXG4gICAgcmV2b2tlQWNjZXNzOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUobnVsbCksXG4gICAgc2lnbk91dDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpLFxuICAgIGlzU2lnbmVkSW46IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKSxcbiAgICBhZGRTY29wZXM6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShleHBvcnRzLm1vY2tVc2VySW5mbyksXG4gICAgZ2V0Q3VycmVudFVzZXI6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShleHBvcnRzLm1vY2tVc2VySW5mbyksXG4gICAgY2xlYXJDYWNoZWRBY2Nlc3NUb2tlbjogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpLFxufTtcbmplc3QubW9jaygnQHJlYWN0LW5hdGl2ZS1nb29nbGUtc2lnbmluL2dvb2dsZS1zaWduaW4nLCAoKSA9PiAoe1xuICAgIHN0YXR1c0NvZGVzOiBtb2NrU3RhdHVzQ29kZXMsXG4gICAgR29vZ2xlU2lnbmluOiBtb2NrR29vZ2xlU2lnbmluLFxuICAgIEdvb2dsZVNpZ25pbkJ1dHRvbjogTW9ja0dvb2dsZVNpZ25pbkJ1dHRvblR5cGVkLFxufSkpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQWlEWkEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMkNBQTJDLEVBQUU7RUFBQSxPQUFPO0lBQzFEQyxXQUFXLEVBQUVDLGVBQWU7SUFDNUJDLFlBQVksRUFBRUMsZ0JBQWdCO0lBQzlCQyxrQkFBa0IsRUFBRUM7RUFDeEIsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUFDLFNBQUFQLFlBQUE7RUFBQSxJQUFBUSxRQUFBLEdBQUFDLE9BQUE7SUFBQUMsSUFBQSxHQUFBRixRQUFBLENBQUFFLElBQUE7RUFBQVYsV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQVUsSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBcERKLElBQUlDLGVBQWUsR0FBSSxJQUFJLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQUssVUFBVUMsR0FBRyxFQUFFO0VBQ25FLE9BQVFBLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFVLEdBQUlELEdBQUcsR0FBRztJQUFFLFNBQVMsRUFBRUE7RUFBSSxDQUFD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